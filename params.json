{
  "name": "Vortigern",
  "tagline": "A universal boilerplate for building web applications w/ TypeScript, React, Redux and more.",
  "body": "[![Dependency Status](https://david-dm.org/barbar/vortigern.svg)]()\r\n[![devDependency Status](https://david-dm.org/barbar/vortigern/dev-status.svg)]()\r\n[![Code Climate](https://codeclimate.com/github/barbar/vortigern/badges/gpa.svg)](https://codeclimate.com/github/barbar/vortigern)\r\n[![GitHub issues](https://img.shields.io/github/issues/barbar/vortigern.svg)](https://github.com/barbar/vortigern/issues)\r\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/barbar/vortigern/develop/LICENSE)\r\n___\r\n\r\n<img src=\"https://barbaruploads.s3.amazonaws.com/bicoz/vortigern.png\" width=\"100%\" />\r\n\r\n**Vortigern** is our opinionated boilerplate for crafting universal web applications by using modern technologies like TypeScript, React and Redux.\r\n\r\n## Libraries\r\nVortigern uses the following libraries and tools:\r\n\r\n#### Core\r\n- [TypeScript](https://www.typescriptlang.org/)\r\n- [React](https://github.com/facebook/react) & [React DOM](https://github.com/facebook/react) for views.\r\n- [React Router](https://github.com/reactjs/react-router) to handle in-app routing.\r\n- [Redux](https://github.com/reactjs/redux) for managing application state.\r\n- [React-Redux](https://github.com/reactjs/react-redux) to use React-Redux bindings.\r\n- [React-Router-Redux](https://github.com/reactjs/react-router-redux) to keep application state sync with route changes.\r\n\r\n#### Utilities\r\n- [classnames](https://github.com/JedWatson/classnames)\r\n- [Redux Thunk](https://github.com/gaearon/redux-thunk) for dispatching async actions.\r\n- [Isomorphic Fetch](https://github.com/matthew-andrews/isomorphic-fetch) with [ES6-Promise](https://github.com/stefanpenner/es6-promise) for using fetch api on both client & server side.\r\n- [React Helmet](https://github.com/nfl/react-helmet)\r\n\r\n#### Build System\r\n- [Webpack](https://github.com/webpack/webpack) for bundling.\r\n\t- [TypeScript Loader](https://github.com/andreypopp/typescript-loader) as ts loader.\r\n\t- [Babel Loader](https://github.com/babel/babel-loader) as js loader.\r\n\t- [React Hot Loader](https://github.com/gaearon/react-hot-loader) for providing hot reload capability to our development server\r\n\t- [Isomorphic Style Loader](https://github.com/kriasoft/isomorphic-style-loader) for loading styles on server-side.\r\n\t- [Style Loader](https://github.com/webpack/style-loader)\r\n\t- [CSS Loader](https://github.com/webpack/css-loader)\r\n\t- [PostCSS Loader](https://github.com/postcss/postcss)\r\n\t\t- [Autoprefixer](https://github.com/postcss/autoprefixer)\r\n\t\t- [PreCSS](https://github.com/jonathantneal/precss)\r\n\t\t- [PostCSS Assets](https://github.com/assetsjs/postcss-assets)\r\n\t- [JSON Loader](https://github.com/webpack/json-loader)\r\n\t- [File Loader](https://github.com/webpack/file-loader) & [URL Loader](https://github.com/webpack/url-loader)\r\n\t- [SourceMap Loader](https://github.com/webpack/source-map-loader)\r\n\t- [Manifest Plugin](https://github.com/danethurber/webpack-manifest-plugin)\r\n\t- [Extract Text Plugin](https://github.com/webpack/extract-text-webpack-plugin) for exporting bundled css. \r\n\t- [Tslint Loader](https://github.com/wbuchwalter/tslint-loader) for using tslint as preloader on build process.\r\n\t- [Stylelint Loader](https://github.com/adrianhall/stylelint-loader) for using stylelint as preloader on build process.\r\n\t- [Istanbul Instrumenter Loader](https://github.com/deepsweet/istanbul-instrumenter-loader) for using istanbul on postload process while generating code coverage reports.\r\n\r\n#### Dev & Prod Server\r\n- [Webpack Dev Server](https://github.com/webpack/webpack-dev-server)\r\n\t- [Webpack Dev Middleware](https://github.com/webpack/webpack-dev-middleware)\r\n\t- [Webpack Hot Middleware](https://github.com/webpack/webpack-hot-middleware)\r\n- [Express](https://github.com/expressjs/express) for running server both on client and server side.\r\n- [Compression](https://github.com/expressjs/compression) for gzip compression\r\n- [Serve Favicon](https://github.com/expressjs/serve-favicon) for serving favicon.\r\n\r\n#### Developer Experience\r\n- [Typings](https://github.com/typings/typings) for installing type definitions of external libraries.\r\n- [tslint](https://github.com/palantir/tslint) for linting TypeScript files.\r\n- [stylelint](https://github.com/stylelint/stylelint) for linting styles.\r\n- [Redux Logger](https://github.com/theaqua/redux-logger)\r\n- [Redux DevTools](https://github.com/gaearon/redux-devtools)\r\n- [Chalk](https://github.com/chalk/chalk) for colored terminal logs.\r\n\r\n#### Testing\r\n- [Karma](https://github.com/karma-runner/karma) as test runner.\r\n- [Mocha](https://github.com/mochajs/mocha) as testing framework.\r\n- [Chai](https://github.com/chaijs/chai) as assertion library.\r\n- [Enzyme](https://github.com/jquery/jquery) for rendering React Components.\r\n- [Karma-Webpack](https://github.com/webpack/karma-webpack), [Karma-Mocha](https://github.com/karma-runner/karma-mocha), [Karma-Chai](https://github.com/xdissent/karma-chai), [Karma-Coverage](https://github.com/karma-runner/karma-coverage), [Karma-PhantomJS Launcher](https://github.com/karma-runner/karma-phantomjs-launcher) as Karma plugins.\r\n\r\n## Folder Structure\r\n```bash\r\n.\r\n├── build                       # Built, ready to serve app.\r\n├── config                      # Root folder for configurations.\r\n│   ├── test                    # Test configurations.\r\n│   ├── types                   # Global type definitions, written by us.\r\n│   ├── webpack                 # Webpack configurations.\r\n│   └── main.ts                 # Generic App configurations.\r\n├── node_modules                # Node Packages.\r\n├── src                         # Source code.\r\n│   ├── app                     # App folder.\r\n│   │ ├── components            # React Components.\r\n│   │ ├── containers            # React/Redux Containers.\r\n│   │ ├── helpers               # Helper Functions & Components.\r\n│   │ ├── redux                 # Redux related code aka data layer of the app.\r\n│   │ │   ├── modules           # Redux modules.   \r\n│   │ │   ├── reducers.ts       # Main reducers file to combine them.  \r\n│   │ │   └── store.ts          # Redux store, contains global app state.    \r\n│   │ └── routes.tsx            # Routes.\r\n│   ├── client.tsx              # Entry point for client side rendering.\r\n│   └── server.tsx              # Entry point for server side rendering.\r\n├── typings                     # Type definitions installed with typings.              \r\n├── .dockerignore               # Tells docker which files to ignore.\r\n├── .gitignore                  # Tells git which files to ignore.\r\n├── .stylelintrc                # Configures stylelint.\r\n├── Dockerfile                  # Dockerfile.\r\n├── favicon.ico                 # Favicon.\r\n├── package.json                # Package configuration.\r\n├── README.md                   # This file\r\n├── tsconfig.json               # TypeScript transpiler configuration.\r\n├── tslint.json                 # Configures tslint.\r\n└── typings.json                # Typings package configuration.\r\n```\r\n\r\n## Installation\r\n```bash\r\n$ git clone https://github.com/barbar/vortigern\r\n$ cd vortigern\r\n$ npm install\r\n```\r\n\r\n## Usage\r\n\r\nAll commands defaults to development environment. You can set `NODE_ENV` to `production` or use the shortcuts below.\r\n\r\n```bash\r\n# Running\r\n\r\n$ npm start # This starts the app in development mode\r\n\r\n# Starting it with the production build\r\n$ NODE_ENV=production npm start # or\r\n$ npm start:prod\r\n\r\n# Building \r\n\r\n$ npm build # This builds the app in development mode\r\n\r\n# Commands below builds the production build\r\n$ NODE_ENV=production npm build # or\r\n$ npm build:prod\r\n\r\n# Testing\r\n$ npm test\r\n```\r\n\r\nSmall thing to note for Windows users, you'll need set the environment with adding `set` to the beginning of the command like `set NODE_ENV=production npm start` for starting and `set NODE_ENV=production npm build` for building. Shortcuts doesn't need any changes.\r\n\r\n## Notes\r\n```bash\r\n# If you want install additional libraries, you can also install their typings from DefinitelyTyped\r\n$ typings install dt~<package> --global --save\r\n# or if it's located on npm\r\n$ typings install <package> --save\r\n```\r\n\r\n## Credits\r\n\r\nThe photo in this readme belongs to [hhvferry.com](http://www.hhvferry.com/vortscrap.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}